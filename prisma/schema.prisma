generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE")
}

model Faq {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique(map: "faq_slug_key")
  dynamic     Boolean    @default(false)
  status      String
  user_id     Int
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime
  user        User       @relation(fields: [user_id], references: [id], map: "FAQ_user_id_fkey")
  question    Question[]

  @@index([slug, id], map: "FAQ_slug_id_idx")
  @@index([user_id], map: "FAQ_user_id_fkey")
}

model Plan {
  id         Int      @id @default(autoincrement())
  title      String
  slug       String   @unique(map: "Plan_slug_key")
  created_at DateTime @default(now())
  updated_at DateTime
  user       User[]

  @@index([slug, id], map: "Plan_slug_id_idx")
}

model Question {
  id         Int      @id @default(autoincrement())
  title      String
  answer     String   @db.LongText
  faq_id     Int
  user_id    Int
  views      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime
  user       User     @relation(fields: [user_id], references: [id], map: "Question_user_id_fkey")
  faq        Faq      @relation(fields: [faq_id], references: [id], map: "Question_faq_id_fkey")

  @@index([faq_id], map: "Question_faq_id_fkey")
  @@index([user_id], map: "Question_user_id_fkey")
  @@index([id], map: "Question_id_idx")
}

model User {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  plan_id    Int?
  shop       String   @unique(map: "User_shop_key")
  scope      String
  updated_at DateTime
  plan       Plan?    @relation(fields: [plan_id], references: [id], map: "User_plan_id_fkey")
  faq        Faq[]
  question   Question[]

  @@index([plan_id], map: "User_plan_id_fkey")
  @@index([shop], map: "User_shop_idx")
}

model AppSession {
  id      String @id
  shop    String
  payload Json

  @@map("app_session")
}
